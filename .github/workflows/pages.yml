name: Deploy QWIK App with Storybook Testing to GitHub Pages

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Test job - runs Storybook tests first
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: |
          echo "Installing Playwright browsers..."
          for i in {1..3}; do
            if npx playwright install --with-deps chromium webkit; then
              echo "Browser installation successful on attempt $i"
              break
            else
              echo "Browser installation failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "Failed to install browsers after 3 attempts"
                exit 1
              fi
              sleep 10
            fi
          done
          echo "Verifying browser installation..."
          npx playwright --version

      - name: Run Storybook tests
        run: |
          echo "Starting Playwright tests with enhanced timeout and debugging..."
          npm run test:playwright
        env:
          CI: true
          DEBUG: "pw:*"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Build and deploy job - only runs if tests pass
  build:
    runs-on: ubuntu-latest
    needs: test # This ensures tests must pass before build/deploy
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-date: ${{ steps.version.outputs.build-date }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate version information
        id: version
        run: |
          # Use git tag if available, otherwise use commit hash
          if git describe --tags --exact-match HEAD 2>/dev/null; then
            VERSION=$(git describe --tags --exact-match HEAD)
          else
            VERSION="1.0.0-$(git rev-parse --short HEAD)"
          fi
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build-date=$BUILD_DATE" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"
          echo "Build date: $BUILD_DATE"

      - name: Update package.json with version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Update package.json with the generated version
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$VERSION\"/" package.json
          echo "Updated package.json version to: $VERSION"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build Storybook
        run: npm run build-storybook
        env:
          APP_VERSION: ${{ steps.version.outputs.version }}
          BUILD_DATE: ${{ steps.version.outputs.build-date }}

      - name: Build QWIK application
        run: |
          npm run build
          npm run build.server
        env:
          APP_VERSION: ${{ steps.version.outputs.version }}
          BUILD_DATE: ${{ steps.version.outputs.build-date }}

      - name: Integrate Storybook with main app
        run: |
          mkdir -p ./dist/wheel-of-gains/storybook
          cp -r ./storybook-static/* ./dist/wheel-of-gains/storybook/

      - name: Create project hub page with version info
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          BUILD_DATE="${{ steps.version.outputs.build-date }}"
          cat > ./dist/wheel-of-gains/index-hub.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Wheel of Gains - Project Hub</title>
              <meta name="app-version" content="$VERSION">
              <meta name="build-date" content="$BUILD_DATE">
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      color: white;
                  }
                  .container { max-width: 600px; padding: 2rem; text-align: center; }
                  .logo {
                      width: 120px; height: 120px; margin: 0 auto 2rem;
                      background: rgba(255, 255, 255, 0.1); border-radius: 50%;
                      display: flex; align-items: center; justify-content: center; font-size: 3rem;
                  }
                  h1 { font-size: 3rem; margin-bottom: 1rem; font-weight: 700; }
                  .subtitle { font-size: 1.2rem; margin-bottom: 3rem; opacity: 0.9; }
                  .version-info {
                      background: rgba(255, 255, 255, 0.1);
                      padding: 0.8rem 1.5rem;
                      border-radius: 8px;
                      margin-bottom: 3rem;
                      font-size: 0.9rem;
                      border: 1px solid rgba(255, 255, 255, 0.2);
                  }
                  .links { display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem; margin-bottom: 2rem; }
                  .link-card {
                      background: rgba(255, 255, 255, 0.1);
                      border: 1px solid rgba(255, 255, 255, 0.2);
                      border-radius: 12px; padding: 2rem 1.5rem;
                      text-decoration: none; color: white;
                      transition: all 0.3s ease; backdrop-filter: blur(10px);
                  }
                  .link-card:hover {
                      transform: translateY(-2px);
                      background: rgba(255, 255, 255, 0.2);
                      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
                  }
                  .link-card .icon { font-size: 2.5rem; margin-bottom: 1rem; display: block; }
                  .link-card h3 { font-size: 1.3rem; margin-bottom: 0.5rem; }
                  .link-card p { font-size: 0.9rem; opacity: 0.8; line-height: 1.4; }
                  .footer { margin-top: 2rem; opacity: 0.7; font-size: 0.9rem; }
                  @media (max-width: 768px) {
                      .links { grid-template-columns: 1fr; }
                      h1 { font-size: 2rem; }
                      .container { padding: 1rem; }
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="logo">üèãÔ∏è</div>
                  <h1>Wheel of Gains</h1>
                  <p class="subtitle">Random workout selector to spice up your fitness routine</p>
                  <div class="version-info">
                      <strong>Version $VERSION</strong><br>
                      <small>Built: $(date -d "$BUILD_DATE" "+%B %d, %Y at %H:%M UTC" 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$BUILD_DATE" "+%B %d, %Y at %H:%M UTC" 2>/dev/null || echo "$BUILD_DATE")</small>
                  </div>
                  <div class="links">
                      <a href="./wheel-of-gains/" class="link-card">
                          <span class="icon">üéØ</span>
                          <h3>Workout App</h3>
                          <p>Spin the wheel and discover your next fitness challenge</p>
                      </a>
                      <a href="./storybook/" class="link-card">
                          <span class="icon">üìñ</span>
                          <h3>Storybook</h3>
                          <p>Component documentation and interactive testing suite</p>
                      </a>
                  </div>
                  <div class="footer">
                      <p>Built with Qwik ‚Ä¢ Tested with Storybook & Playwright</p>
                  </div>
              </div>
          </body>
          </html>
          EOF

      - name: Create build artifacts
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          mkdir -p ./artifacts

          # Create main app artifact
          cd ./dist/wheel-of-gains
          zip -r "../../artifacts/wheel-of-gains-app-$VERSION.zip" .
          cd ../..

          # Create Storybook artifact
          cd ./storybook-static
          zip -r "../artifacts/wheel-of-gains-storybook-$VERSION.zip" .
          cd ..

          # Create combined artifact with both app and storybook
          zip -r "./artifacts/wheel-of-gains-complete-$VERSION.zip" ./dist/wheel-of-gains

          # Create build info file
          cat > "./artifacts/build-info.json" << EOF
          {
            "version": "$VERSION",
            "buildDate": "${{ steps.version.outputs.build-date }}",
            "gitCommit": "$(git rev-parse HEAD)",
            "gitBranch": "$(git rev-parse --abbrev-ref HEAD)",
            "nodeVersion": "$(node --version)",
            "npmVersion": "$(npm --version)"
          }
          EOF

          echo "Created artifacts:"
          ls -la ./artifacts/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheel-of-gains-build-${{ steps.version.outputs.version }}
          path: ./artifacts/
          retention-days: 90

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact for deployment
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload the wheel-of-gains subdirectory containing the built QWIK app and Storybook
          path: "./dist/wheel-of-gains"

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build # Deploy only if build job succeeds (which needs test job to succeed)
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
